from aiogram import Router, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message

from sqlalchemy import select

from src.core.models import User, Task, TaskDaily, Information
from src.core.models.db_helper import get_async_session

from ..filters.chat_type_filter import ChatTypeFilter

router = Router()
router.message.filter(ChatTypeFilter(["private"]))

@router.message(CommandStart())
async def command_start_handler(message: types.Message):
    telegram_id = message.from_user.id
    async for session in get_async_session():
        query = select(User).where(User.telegram_id == telegram_id)
        result = await session.execute(query)
        user = result.scalar_one_or_none()
        
        await message.answer("–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ ü§ñ, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –≤ —Ç–≤–æ–µ–π –∫–∞—Ä—å–µ—Ä–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ ‚å®Ô∏è")
        if not user:
            await message.answer("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å - /register")

@router.message(Command("tasks"))
async def command_tasks_handler(message: Message):
        username = message.from_user.username
        async for session in get_async_session():

            tasks = await session.execute(
                select(Task).where(Task.user_id == username)
            )
            tasks = tasks.scalars().all()

            if tasks:
                text = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
                for task in tasks:
                    text += f"‚Ä¢ {task.description}\n"
                await message.answer(text)
            else:
                await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á!")

@router.message(Command("daily_tasks"))
async def command_daily_tasks_handler(message: types.Message):
    await message.answer("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: ")
    
@router.message(Command("info"))
async def command_daily_tasks_handler(message: types.Message):
    await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ")

    username = message.from_user.username
    async for session in get_async_session():
        query = await session.execute(
            select(Task).where(Task.username == username)
        )
        tasks = query.scalars().all()
        if tasks:
            text = "–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n"
            for task in tasks:
                text += f"‚Ä¢ ‚úÖ {task.description}\n"
            await message.answer(text)
        else:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á!")

@router.message(Command("daily_tasks"))
async def command_daily_tasks_handler(message: types.Message):
    username = message.from_user.username
    async for session in get_async_session():
        query = await session.execute(
            select(TaskDaily).where(TaskDaily.username == username)
        )
        tasks_daily = query.scalars().all()
        if tasks_daily:
            text = "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n"
            for task in tasks_daily:
                text += f"‚Ä¢ ‚úÖ {task.description}\n"
            await message.answer(text)
        else:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á!")
    
@router.message(Command("info"))
async def command_user_information_handler(message: types.Message):
    username = message.from_user.username
    async for session in get_async_session():
        query = await session.execute(
            select(Information).where(Information.username == username)
        )
        information = query.scalar()
        await message.answer(f"<strong>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:</strong> \n\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: {information.job_title}\n\
–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã: {information.work_place}\n–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {information.timetable}")

    
@router.message(Command("register"))
async def command_register_handler(message: Message):
    async for session in get_async_session():
    
        telegram_id = message.from_user.id
        full_name = message.from_user.full_name
        username = message.from_user.username

        query = select(User).where(User.telegram_id == telegram_id)
        result = await session.execute(query)
        user = result.scalar_one_or_none()

        if not user:
            new_user = User(
                telegram_id=telegram_id,
                full_name=full_name,
                username=username,
            )
            session.add(new_user)
            await session.commit()
            await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
                        
        else:
            await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
